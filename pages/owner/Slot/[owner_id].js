import Head from 'next/head';
import { Inter } from 'next/font/google';
import { useRouter } from 'next/router';
import { ROUTES } from '@constants';
import axios from "../../api/authApi"
import { Navbar } from '@components';
import { useEffect, useState } from 'react';
import { validateCourt } from '../../../components/validation/validate';
export default function AddSlot() {
    const router = useRouter()
    const { owner_id } = router.query;
    const intialValues = { from: "", to: "" };
    const [formValues, setFormValues] = useState(intialValues);
    const [slot, setSlot] = useState(false)
    const [formErrors, setFormErrors] = useState({});
    const [successMsg, setSuccessMsg] = useState(null)
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [data, setData] = useState(null)
    const ADDCOURT_URL = `/court/updatecourt/${owner_id}`;
    const [fromTime, setFromTime] = useState([1]);
    const [toTime, setToTime] = useState([1]);
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormValues({ ...formValues, [name]: value });
    };
    useEffect(() => {
        // fetch data
        const dataFetch = async () => {
            const data =
                await axios.get(
                    `/court/${owner_id}`

                );
            data?.data && setData(data?.data.data[0])
        };

        dataFetch();
    }, [owner_id]);
    useEffect(() => {
        if (successMsg === "court updated") {
            router.push(`/owner/Home/${owner_id}`)
        }
    },[successMsg])
    useEffect(() => {
        const arr = [];
        for (let i = 1; i <= 12; i++) {
            arr.push(i);
        }
        setFromTime(arr);
    }, [])
    useEffect(() => {
        const arr = [];
        for (let i = formValues.from; i <= 24; i++) {
            arr.push(i);
        }
        setToTime(arr)
    }, [formValues?.from])
    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.put(
                ADDCOURT_URL,
                JSON.stringify(formValues),
                {
                    headers: {
                        "Content-Type": "application/json",
                    },
                    withCredentials: true,
                }
            );
            console.log(formValues,response,"res...........");
            response.data.id && setSuccessMsg("court updated")
        } catch (err) {
            console.log(err, "error");
        }
    }
    return (
        <>
            <div className='w-full'>
                <Navbar />
                <Head>
                    <title>Arena | Add slot</title>
                    <meta name='description' content='Generated by create next app' />
                    <meta name='viewport' content='width=device-width, initial-scale=1' />
                    <link rel='icon' href='/favicon.ico' />
                </Head>
                <main>
                    <form action="#" method="POST" onSubmit={handleSubmit} className="mx-auto mt-16 max-w-xl sm:mt-20">
                        <div>
                            <div className="grid grid-cols-1 gap-y-6 gap-x-8 sm:grid-cols-2">
                                <div className="sm:col-span-2">
                                    <label className="block text-sm font-semibold leading-6 text-gray-900">Badminton court</label>
                                    <div className="mt-2.5">
                                        <input type="text" name="courtName" id="courtName" value={data?.courtName} onChange={handleChange} className="block w-full rounded-md border-0 py-2 px-3.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" required />
                                    </div>
                                </div>
                            </div>
                            <div className="mt-10">
                                <div onClick={() => setSlot(true)} className="block w-full rounded-md bg-indigo-600 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" >Select slot</div>
                            </div>
                            {slot && (
                <>
                  <div className="py-3">
                    <label className="block text-sm font-semibold leading-6 text-gray-900">
                      TIME
                    </label>
                    <div className="flex justify-around">
                      <div className="flex items-center">
                        <label className="block text-sm font-semibold leading-6 text-gray-900">
                          From
                        </label>
                        <select name="from" onChange={handleChange} required>
                          {fromTime?.map((i) => {
                            return <option value={i}>{i}</option>;
                          })}
                        </select>
                      </div>

                      <div className="flex items-center">
                        <label className="block text-sm font-semibold leading-6 text-gray-900">
                          To
                        </label>
                        <select name="to" onChange={handleChange} required>
                          {toTime?.map((i) => {
                            return <option value={i}>{i}</option>;
                          })}
                        </select>
                      </div>
                    </div>
                  </div>
                </>
              )}
                            <br />
                            <div className="flex justify-center">
                <button
                //   onClick={() => router.push(`/owner/Slot/${owner_id}`)}
                  class="italic rounded-full py-2.5 px-4 bg-green-500 text-white font-semibold shadow-md hover:bg-white-700 focus:outline-gray focus:ring-2 focus:ring-white-400 focus:ring-opacity-75"
                >
                  Submit
                </button>
              </div>
                        </div>
                    </form>
                </main>
            </div>
        </>
    );
}
